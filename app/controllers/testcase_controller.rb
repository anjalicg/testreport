require 'spreadsheet'
require 'mysql'
class TestcaseController < ApplicationController
  def new   
    @profiles=["1","2","3","4","5","6","7","8","255"]
    @builds=Build.find(:all)    
    case request.method
      when :post
      @testcase=Testcase.new(params[:testcase])
      if @testcase.save        
        flash[:notice] = "Changes saved"
        redirect_to :action=>'new'
        else
          flash[:notice] = "Fail to Save Changes"
        end
      end
      
    end
    def list
      @testcases=Testcase.find(:all)
    end
    def edit
      @profiles=["1","2","3","4","5","6","7","8","9","10","253","254","255",""]
      @testcase=Testcase.find(params[:id])
      @builds=Build.find(:all)    
      case request.method
         when :post        
         if @testcase.update_attributes(params[:testcase])
         flash[:notice] = "Changes saved#{@testcase.testcase_id}"
         #~ puts "...............#{@testcase.id.class}.............."
          x=@testcase.id
          #~ puts "#{x}........................."
          x +=1
          #~ puts "#{x}........................."
          redirect_to :action=>'next_testcase',:id=>x
          
            #~ redirect_to :action=>'edit',:id=>x
          else
            flash[:notice] = "Failed to save changes. Try again"
          end
        end
        
      
    end
    def next_testcase
      @profiles=["1","2","3","4","5","6","7","8","9","10","253","254","255",""]
      @testcase=Testcase.find(params[:id])
      @builds=Build.find(:all)    
      puts @testcase.testdescription, @testcase.testcase_id
      case request.method
         when :post        
         if @testcase.update_attributes(params[:testcase])
         flash[:notice] = "Changes saved#{@testcase.testcase_id}"
         #~ puts "...............#{@testcase.id.class}.............."
          x=@testcase.id
          #~ puts "#{x}........................."
          x +=1
          #~ puts "#{x}........................."
          redirect_to :action=>'next_testcase',:id=>x
          
            #~ redirect_to :action=>'edit',:id=>x
          else
            flash[:notice] = "Failed to save changes. Try again"
          end
        end
    end
    
    def show
      @testcase=Testcase.find(params[:id])
    end
    def uploadfile
      @builds=Build.find(:all)      
    end
    
    
    
     def uploadFile2server
    @message=Array.new(0)
    book =Spreadsheet.open (params[:upload][:datafile])
    row1=params[:upload][:row].to_i 
    row1-=1
    sheet1=book.worksheet 0
    ms =Mysql.new('localhost','root','gain','testreport_production')
     list=Build.find(:all)  
  for i in row1..sheet1.row_count
    #~ puts sheet1[i,1]


        if sheet1[i,1] and sheet1[i,2] and sheet1[i,3] and get_build(sheet1[i,4],list).to_s
          @message.push("#{sheet1[i,1].gsub(/ /,"")}")
          puts "TestcaseController->uploadFile2server:insert into testcases (testcase_id, testdescription,build_id,profile) values (\"#{sheet1[i,1].gsub(/ /,"")}\", \"#{sheet1[i,3]}\",#{get_build(sheet1[i,4],list)},#{sheet1[i,2].to_i})"
          ms.query("insert into testcases (testcase_id, testdescription,build_id,profile) values (\"#{sheet1[i,1].gsub(/ /,"")}\", \"#{sheet1[i,3]}\",#{get_build(sheet1[i,4],list)},#{sheet1[i,2].to_i})")
      end 
end
flash[:notice] ="File succesfully uploaded to the database. #{sheet1.row_count-row1} records created"
  end
     protected
  def get_build (name,build)
  print "\nName :#{name}:"

  if name
  name.gsub!(/ /,"")
  name.gsub!(/\n /,"")
  name.gsub!(/ \r\n/,"")
  end
 build.each do |b|
   if b.name==name
     puts b.id
     return b.id
   end
 end
 
 
  
end
    def add_all
  casesf=Array.new()
  #~ casesf<<"*TC_PKG_1_1"
#~ casesf<<"Package Installation "
#~ casesf<<"*TC_PKG_2_1"
#~ casesf<<"Package Un Installation"
#~ casesf<<"*TC_COMPILE_1_1"
#~ casesf<<"Compile & Build test "
#~ casesf<<"TC_COMPILE_2_1"
#~ casesf<<"Build without Supplicant Wpa2-psk or wpa2-fast"
#~ casesf<<"TC_COMPILE_2_2"
#~ casesf<<"Build with sensors "
#~ casesf<<"TC_COMPILE_2_4"
#~ casesf<<"Build with peripheral drivers   "
#~ casesf<<"TC_COMPILE_2_5"
#~ casesf<<"Build without peripheral drivers  "
#~ casesf<<"TC_COMPILE_2_6"
#~ casesf<<"Build with debug "
#~ casesf<<"TC_COMPILE_2_7"
#~ casesf<<"Build with security parameters' read enabled."
#~ casesf<<"TC_COMPILE_2_8"
#~ casesf<<"Build without watchdog "
#~ casesf<<"TC_COMPILE_2_9"
#~ casesf<<"Build with SNMP manager ip from DHCP"
#~ casesf<<"TC_COMPILE_2_11"
#~ casesf<<"Build with External PA "
#~ casesf<<"*TC_FWUG_SI_1_1"
#~ casesf<<"Erase Flash /Update Flash with new  FW  in Boot Rom mode over serial interface"
#~ casesf<<"*TC_CONFIG_SI_1_1"
#~ casesf<<"In config mode check whether config traps are coming or not "
#~ casesf<<"*TC_MIB_SI_1_1"
#~ casesf<<"In Config mode , all MIBs are readable /writable, SNMP walk through"
#~ casesf<<"*TC_WLAN_ASSOC_1_1"
#~ casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with Linksys(WRT54G) AP"
#~ casesf<<"*TC_WLAN_ASSOC_1_2"
#~ casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with Cisco AP"
#~ casesf<<"*TC_WLAN_ASSOC_1_3"
#~ casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with D-link AP"
casesf<<"*TC_WLAN_ASSOC_1_4"
casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with Netgear AP"
casesf<<"*TC_WLAN_ASSOC_1_5"
casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with Proxim AP"
casesf<<"*TC_WLAN_ASSOC_1_6"
casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with APPLE AP"
casesf<<"*TC_WLAN_ASSOC_1_7"
casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with Linksys(WRT54G2) AP"
casesf<<"*TC_WLAN_ASSOC_1_8"
casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with Linksys(WRT54G) AP"
casesf<<"*TC_WLAN_ASSOC_1_9"
casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with Symbol  AP"
casesf<<"*TC_WLAN_ASSOC_1_10"
casesf<<"Basic WLAN association with different securities ,different radio modes & different SSID1/2/3 configuration   with  Linksys (WRT54G v8)AP"
casesf<<"*TC_WLAN_ASSOC_2_1"
casesf<<"Basic WLAN association with different securities and EAP authentication methods, different radio modes and different SSID1/2/3 configuration with Linksys (WRT54G) AP"
casesf<<"*TC_WLAN_ASSOC_2_2"
casesf<<"Basic WLAN association with different securities and EAP authentication methods, different radio modes and different SSID1/2/3 configuration with  Cisco Aironet 1200 series AP"
casesf<<"TC_WLAN_ASSOC_2_3"
casesf<<"Basic WLAN association with different securities and EAP authentication methods, different radio modes and different SSID1/2/3 configuration with  Linksys (WRT54G2) AP"
casesf<<"TC_WLAN_ASSOC_2_4"
casesf<<"Basic WLAN association with different securities and EAP authentication methods, different radio modes and different SSID1/2/3 configuration with  Linksys (WRT54G v8) AP"
casesf<<"TC_WLAN_ASSOC_2_5"
casesf<<"Basic WLAN association with different securities and EAP authentication methods, different radio modes and different SSID1/2/3 configuration with  Motorola AP"
casesf<<"TC_WLAN_ASSOC_2_6"
casesf<<"Basic WLAN association with different securities and EAP authentication methods, different radio modes and different SSID1/2/3 configuration with  Apple AP"
casesf<<"*TC_SAT_1_1"
casesf<<"Scan, Associate & Traps TX with default values "
casesf<<"*TC_SAT_1_2"
casesf<<"Scan, Associate & Traps TX with Open security"
casesf<<"*TC_SAT_1_3"
casesf<<"Scan, Associate & Traps TX with WPA2-PSK security"
casesf<<"*TC_SAT_1_4"
casesf<<"Scan, Associate & Traps TX with WEP security"
casesf<<"*TC_SAT_1_5"
casesf<<"Scan, Associate & Traps TX with WPA-PSK security"
casesf<<"TC_DEFRAG_PING_1_1"
casesf<<"Verify that the node supports de-fragmentation of fragmented packets received by it."
casesf<<"TC_RTS_CTS_1_1"
casesf<<"Verify that the node sends CTS"
casesf<<"TC_RTS_DEFRAG_2_1"
casesf<<"Verify that node sends CTS along with de-fragmentation"
casesf<<"TC_ DIFF_PSK_1_1"
casesf<<"Change PSK after association with S2 Mix BG"
casesf<<"TC_ DIFF_PSK_1_2"
casesf<<"Change PSK after association with S4 Mix BG"
casesf<<"TC_BATTERY_INOUT_1_1"
casesf<<"Battery removal when the node is in StandBy."
casesf<<"TC_BATTERY_INOUT_1_2"
casesf<<"Battery removal when the node not in standby"
casesf<<"TC_SEC_RADIUS_1_1"
casesf<<"Secondary radius server takes over"
casesf<<"*TC_PUDAP_1_1"
casesf<<"AP's power is plugged-in /plugged out "
casesf<<"*TC_PUDAP_1_2"
casesf<<"Two APs are used , AP1 goes off,AP2 is brought back with same configuration"
casesf<<"TC_PUDAP_1_3"
casesf<<"Two APs are used , AP1 goes off,AP2 is brought back with same configuration with S5 Mix BG"
casesf<<"*TC_PUDAP_2_1"
casesf<<"Node is made to connect with SSID1, SSID2, SSID3 and then SSID1 again in active scan mode."
casesf<<"*TC_PUDAP_2_2"
casesf<<"Node is made to connect with SSID1, SSID2, SSID3 and then SSID1 again in passive scan mode."
casesf<<"TC_PUDAP_2_3"
casesf<<"Node is made to connect with SSID1, SSID2, SSID3 and then SSID1 again in active scan mode.All three SSIDs are configured with different EAP authentication methods (TLS, FAST, PEAP)"
casesf<<"TC_RANGE_1_1"
casesf<<"Node is taken away from AP and brought back."
casesf<<"TC_WPA_COUNTERMEASURE_1_1"
casesf<<"WPA countermeasures Pure Mode "
casesf<<"TC_WPA_COUNTERMEASURE_2_1"
casesf<<"WPA/WPA2 countermeasures Mixed Mode"
casesf<<"*TC_MIB_WI_1_1"
casesf<<"MIB set/get over Wireless Interface , SNMP walk through"
casesf<<"TC_MIB_WI_1_2"
casesf<<"MIB set/get over Wireless Interface , SNMP walk through to check for EAP username and password"
casesf<<"*TC_FWUG_WI_1_1"
casesf<<"FW upgrade over Wireless interface with WEP security."
casesf<<"*TC_FWUG_WI_1_2"
casesf<<"FW upgrade over Wireless interface with WPA2 security and different port and IP address."
casesf<<"*TC_FWUG_WI_1_3"
casesf<<"FW upgrade from different machine in the network"
casesf<<"*TC_FWUG_WI_1_4"
casesf<<"FW upgrade over NATed environment."
casesf<<"TC_FWUG_WI_2_1"
casesf<<"FW upgrade over Wireless interface fails due to low battery power"
casesf<<"*TC_FWUG_WI_3_3"
casesf<<"AP is powered down in the middle of the download."
casesf<<"*TC_FWUG_WI_3_4"
casesf<<"Only WLAN firmware and it is interrupted"
casesf<<"*TC_FWUG_WI_3_5"
casesf<<"Upgrade APP1 and APP2 and APP2 is interrupted"
casesf<<"*TC_FWUG_WI_3_6"
casesf<<"Upgrade APP1 and APP2 and APP1 is interrupted"
casesf<<"*TC_FWUG_WI_3_7"
casesf<<"Upgrade only APP2 and interrupt it"
casesf<<"*TC_FWUG_WI_3_8"
casesf<<"Upgrade all APP1, APP2 and WLAN and interrupt WLAN"
casesf<<"*TC_FWUG_WI_3_9"
casesf<<"Upgrade all APP1, APP2 and WLAN and interrupt APP2"
casesf<<"*TC_FWUG_WI_3_10"
casesf<<"Upgrade all APP1, APP2 and WLAN and interrupt APP1"
casesf<<"TC_FWUG_WI_3_11"
casesf<<"Upgrade all and interrupt APP2 by sending a de-auth request from the AP"
casesf<<"TC_FWUG_WI_3_12"
casesf<<"Upgrade all and interrupt the process by GTK timeout"
casesf<<"*TC_FWUG_WI_4_1"
casesf<<"Only APP flash is upgraded"
casesf<<"*TC_FWUG_WI_4_2"
casesf<<"Only WLAN flash is upgraded"
casesf<<"*TC_FWUG_WI_4_3"
casesf<<"Only APP flash is upgraded over NATed environment"
casesf<<"*TC_FWUG_WI_4_4"
casesf<<"Only WLAN flash is upgraded over NATed environment"
casesf<<"*TC_FWUG_WI_5_1"
casesf<<"Upgrade to Always-on from Standby"
casesf<<"*TC_FWUG_WI_6_1"
casesf<<"Upgrade to Standby from Always-On"
casesf<<"TC_FWUG_WI_7_1"
casesf<<"Upgrade all and interrupt APP2 and recover only APP2 and WLAN"
casesf<<"TC_FWUG_WI_7_2"
casesf<<"Upgrade all and interrupt WLAN and recover only WLAN"
casesf<<"TC_FWUG_WI_8_1"
casesf<<"FW upgrade is started but the FW update server is not running"
casesf<<"TC_FWUG_WI_9_1"
casesf<<"FW upgrade from DHCP options-enabled binary to DHCP options-disabled binary and back"
casesf<<"TC_FWDG_WI_1_1"
casesf<<"FW downgrade with WEP security"
casesf<<"TC_FWDG_WI_1_2"
casesf<<"FW downgrade with WPA2 security "
casesf<<"*TC_CWB_1_1"
casesf<<"Cold & warm boot, Device goes only once cold boot after battery plug out, later rest of them are warm boots. This means only one association should happen."
casesf<<"*TC_SSNMP_1_1"
casesf<<"Secondary SNMP takes over "
casesf<<"*TC_SSNMP_2_1"
casesf<<"Primary SNMP takes over from Secondary SNMP "
casesf<<"TC_SSNMP_NAT_1_"
casesf<<"Secondary SNMP is in external network and primary SNMP is made unavailable for some time"
casesf<<"TC_SNMP_NAT_1_1"
casesf<<"Primary SNMP and Data server are in external network"
casesf<<"TC_SNMP_NAT_2_1"
casesf<<"Primary SNMP is internal, data server is in external network"
casesf<<"TC_SNMP_NAT_3_1"
casesf<<"Primary SNMP is external, data server is in internal network"
casesf<<"TC_LONGEVITY_1_1"
casesf<<"One 12 hrs long run with nodes near to  AP &  nodes at border of AP with no security"
casesf<<"TC_LONGEVITY_1_2"
casesf<<"One 12 hrs long run with nodes near to AP & nodes at border of AP with WPA2 security."
casesf<<"TC_LONGEVITY_1_3"
casesf<<"One 12 hrs long run with nodes near to AP & nodes at border of AP with WEP security."
casesf<<"TC_LONGEVITY_1_4"
casesf<<"One 12 hrs long run with nodes near to AP & nodes at border of AP with WPA security."
casesf<<"TC_LONGEVITY_1_5"
casesf<<"One 12 hrs long run with nodes near to AP & nodes at border of AP with WPA2-FAST security."
casesf<<"TC_LONGEVITY_1_6"
casesf<<"One 12 hrs long run with nodes near to AP & nodes at border of AP with WPA-FAST security."
casesf<<"TC_LONGEVITY_1_7"
casesf<<"One 12 hrs long run with nodes near to AP & nodes at border of AP with EAP-TLS security."
casesf<<"TC_LONGEVITY_1_8"
casesf<<"One 12 hrs long run with nodes near to AP & nodes at border of AP with EAP-TTLS security."
casesf<<"TC_LONGEVITY_1_9"
casesf<<"One 12 hrs long run with nodes near to AP & nodes at border of AP with EAP-PEAP security."
casesf<<"*TC_LONGEVITY_2_1"
casesf<<"5 days long run with all security modes. Each security has 2 nodes(1DB +1EB)  "
casesf<<"TC_LONGEVITY_3_1"
casesf<<"Infinite Long Standby test UDP???"
casesf<<"TC_LONGEVITY_4_1"
casesf<<"1 hour long run with WPA2-AES with 20 nodes to check for error counts"
casesf<<"TC_LONGEVITY_FWUG_1_1"
casesf<<"Firmware upgrade when large number of nodes are present in the network"
casesf<<"TC_STRESS_1_1"
casesf<<"12 hour long run with multiple associations, security changes and different IP at every association."
casesf<<"TC_PSNMP_DMAC_1_1"
casesf<<"Network shifts (AP1 to AP2) & SNMP application gets shifted to another machine"
casesf<<"TC_PSNMP_ONOFF_1_1"
casesf<<"Primary SNMP is took off the nwteork for sometime and then brought back"
casesf<<"TC_GSNMP_SMAC_1_1"
casesf<<"Network shifts (AP1 to AP2) & SNMP application is same  machine"
casesf<<"TC_NODE_RECEIVER_ON/OFF_1_1"
casesf<<"SNUT receiver is off during when it is not sending config trap"
casesf<<"TC_MAX_ARP_1_1"
casesf<<"SNUT behaviour on receiving more than 6 ARP Responses"
casesf<<"TC_NO_SECONDARY_SNMP_1_1"
casesf<<"SNUT is configured to not have a secondary SNMP server in the network."
casesf<<"*TC_PACKT_FORMAT_1_1"
casesf<<"Packet format of Data trap, config trap and link-up trap"
casesf<<"*TC_PACKT_FORMAT_1_2"
casesf<<"Packet format of Battery trap"
casesf<<"*TC_PACKT_FORMAT_2_1"
casesf<<"Packet format of NTP client."
casesf<<"TC_NEW_EAPUSER_1_1"
casesf<<"Change username and password length. Use odd/even/maximum/minimum length values"
casesf<<"TC_NEW_EAPUSER_1_2"
casesf<<"Change username and password length. Use even length values"
casesf<<"TC_NEW_EAPUSER_1_3"
casesf<<"Change username and password length. Use odd length values"
casesf<<"TC_NEW_EAPUSER_1_4"
casesf<<"Change username and password length. Use maximum length values"
casesf<<"TC_NEW_EAPUSER_1_5"
casesf<<"Change username and password length. Use minimum length values"
casesf<<"TC_MULTINODES_EAPUSER_1_1"
casesf<<"Multiple nodes use same username and password to authenticate to the network"
casesf<<"TC_MULTINODES_EAPUSER_1_2"
casesf<<"Multiple nodes and network machines use same username and password to authenticate to the network"
casesf<<"*TC_NON_1_1"
casesf<<"Node's behaviour when no networks are present, all SSIDs are different"
casesf<<"*TC_NON_1_2"
casesf<<"Node's behaviour when no networks are present, all SSIDs are same"
casesf<<"*TC_NON_1_3"
casesf<<"Node's behaviour when no networks are present, all channels are different but overlapping"
casesf<<"*TC_NON_1_4"
casesf<<"Node's behaviour when no networks are present, all channels are different but non-overlapping"
casesf<<"*TC_MAP_1_1"
casesf<<"AP1 with SSID1, AP2 with SSID2 & AP3 with SSID3, node is at the overlap area of these APs "
casesf<<"*TC_MAP_2_1"
casesf<<"Three APs have the same configuration"
casesf<<"*TC_KEYMISMATCH_1_1"
casesf<<"Node & AP have different keys in WPA2-PSK mode "
casesf<<"*TC_KEYMISMATCH_1_2"
casesf<<"Node & AP have different keys in WPA2-PSK mode , the test is run over night"
casesf<<"*TC_KEYMISMATCH_2_1"
casesf<<"Node and AP have different Pre-computed keys in WPA2-PSK"
casesf<<"*TC_WEP_MISMATCH_1_1"
casesf<<"WEP key is incorrectly configured on the node"
casesf<<"*TC_WEP_MISMATCH_1_2"
casesf<<"WEP key ID is incorrectly configured on the node."
casesf<<"*TC_WLAN_AUTH_MISMATCH_1_1"
casesf<<"Node & AP have different WLAN level Authentication (AP open , Node Shared )"
casesf<<"*TC_WLAN_AUTH_MISMATCH_1_2"
casesf<<"Node & AP have different WLAN level Authentication (AP shared , Node open )"
casesf<<"TC_SUPPLICANT_MISMATCH_1_"
casesf<<"AP has enterprise security and SNUT has PSK supplicant"
casesf<<"TC_SUPPLICANT_MISMATCH_1_"
casesf<<"AP has personal security and SNUT has EAP supplicant"
casesf<<"*TC_SIPADDR_1_1"
casesf<<"Node is connected state , another new third party has come up with same IP address"
casesf<<"*TC_NOARP_1_1"
casesf<<"No ARP response is given "
casesf<<"*TC_NODHCP_1_1"
casesf<<"No DHCP response is given "
casesf<<"*TC_NOSNMP_1_1"
casesf<<"No SNMP with UDP data type"
casesf<<"TC_NODATA_1_1"
casesf<<"No data server when APP Protocol data type is UDP"
casesf<<"TC_NODATA_1_2"
casesf<<"No data server when APP Protocol data type is TCP"
casesf<<"TC_PING_ATTACK_1_1"
casesf<<"Ping Attack with different size packets"
casesf<<"TC_WRONG_SNMPATTACK_1_1"
casesf<<"Sending wrong SNMP messages"
casesf<<"TC_CONFIG_WAKEUP_IVL_1_1"
casesf<<"Large Config & Wakeup Intervals, both are same equal to 3600 secs"
casesf<<"TC_CONFIG_WAKEUP_IVL_1_2"
casesf<<"Small Config & Wakeup Intervals"
casesf<<"TC_CONFIG_WAKEUP_IVL_2_1"
casesf<<"Config and Linkup interval is set to 0"
casesf<<"TC_CONFIG_WAKEUP_IVL_2_2"
casesf<<"Config interval is set to 0 and link up interval is default"
casesf<<"TC_CONFIG_WAKEUP_IVL_2_3"
casesf<<"Config interval is default and link up is set to 0"
casesf<<"TC_LOWVOLTAGE_1_1"
casesf<<"Node detects low voltage below threshold1  level & sends battery traps, upper limit is set to 3.6 V"
casesf<<"*TC_LOWVOLTAGE_1_2"
casesf<<"Node detects low voltage below threshold1  level & sends battery traps, upper limit is set to 2.9 V"
casesf<<"*TC_LOWVOLTAGE_2_1"
casesf<<"Node detects low voltage below threshold2  level & enters permanent STDBY mode, lower limit is the default value of 2.7 V"
casesf<<"TC_LOWVOLTAGE_2_2"
casesf<<"Node detects low voltage below threshold2  level & enters permanent STDBY mode, lower limit is set to 2.8 V"
casesf<<"*TC_LOWVOLTAGE_3_1"
casesf<<"Node detects low voltage below threshold2  level & enters permanent STDBY mode, lower limit is set to 2.7 V in not connected mode "
casesf<<"TC_LOWVOLTAGE_3_2"
casesf<<"Node detects low voltage below threshold2  level & enters permanent STDBY mode, lower limit is set to 2.8 V in non connected mode"
casesf<<"TC_LOWVOLTAGE_COLDBOOT_1_1"
casesf<<"Node detects the low voltage level of battery at cold boot to prevent any flash corruption."
casesf<<"*TC_CHANGE_DATA_PORT_1_1"
casesf<<"Data destination port is set to 49150"
casesf<<"TC_RADIUS_GROUP_KEY_TIMEOUT_1_1"
casesf<<"SNUT Group key timeout with configuration #s7 Mix BG"
casesf<<"TC_RADIUS_GROUP_KEY_TIMEOUT_1_2"
casesf<<"SNUT Group key timeout with configuration #s8 Mix BG"
casesf<<"TC_PAC_TIMEOUT_1_1"
casesf<<"PAC timeout with configuration #S6 Mix BG"
casesf<<"TC_PAC_TIMEOUT_1_2"
casesf<<"PAC timeout with configuration #S5 Mix BG"
casesf<<"TC_INVALID_CREDENTIALS_1_1"
casesf<<"Pass word on the SNUT is incorrect #S9 Mix BG"
casesf<<"TC_INVALID_CREDENTIALS_1_2"
casesf<<"Username on the SNUT is incorrect #S5 Mix BG"
casesf<<"TC_INVALID_RADIUS_1_1"
casesf<<"RADIUS server is not present in the network # S7 Mix BG"
casesf<<"TC_SEC_READ_1_1"
casesf<<"Read the security related MIB values in Security Read- Enabled binary # S1 Mix BG"
casesf<<"TC_BUILD_SUPPLICANT_1_1"
casesf<<"Build and test with PSK supplicant # S4 Mix BG"
casesf<<"TC_BUILD_SUPPLICANT_1_2"
casesf<<"Build and test with EAP supplicant #S5 Mix BG"
casesf<<"*TC_MIN_GRPTIMEOUT_1_1"
casesf<<"#S4-MixBG with Linksys WRT54G AP"
casesf<<"TC_MIN_GRPTIMEOUT_1_2"
casesf<<"#S4-MixBG with Linksys WRT54G2 AP"
casesf<<"TC_MIN_GRPTIMEOUT_1_3"
casesf<<"#S2-MixBG with Cisco AP "
casesf<<"*TC_MIN_GRPTIMEOUT_1_4"
casesf<<"# S4-MixBG with Linksys WRT310N AP "
casesf<<"TC_MIN_GRPTIMEOUT_1_5"
casesf<<"#S4-MixBG with Linksys WRT54G, v8 AP"
casesf<<"TC_MIN_GRPTIMEOUT_1_6"
casesf<<" Symbol AP"
casesf<<"*TC_POWER_1_1"
casesf<<"Power profiling  without security"
casesf<<"*TC_POWER_1_2"
casesf<<"Power profiling  with WPA2-PSK security"
casesf<<"TC_POWER_1_3"
casesf<<"Power profiling  with WPA-PSK security"
casesf<<"TC_POWER_1_4"
casesf<<"Power profiling  with WEP-128  security"
casesf<<"*TC_ALPS_1_1"
casesf<<"Data TX with default values "
casesf<<"*TC_ALPS_1_2"
casesf<<"Data TX with Open security"
casesf<<"*TC_ALPS_1_3"
casesf<<"Data TX with WPA2-PSK security"
casesf<<"*TC_ALPS_1_4"
casesf<<"Data TX with WEP security"
casesf<<"*TC_ALPS_1_5"
casesf<<"Data TX with WPA-PSK security"
casesf<<"*TC_ALPS_1_6"
casesf<<"Data TX with WPA2(EAP_FAST) security"
casesf<<"*TC_ALPS_1_7"
casesf<<"Data TX with WPA(EAP_FAST) security"
casesf<<"TC_MP_1_1"
casesf<<"Node is working properly in minimum power mode , LEDs should not glow in this mode"
casesf<<"TC_STRAP_1_1"
casesf<<"Sensor trap comes when "
casesf<<"*TC_DS_1"
casesf<<"Different data server "
casesf<<"*TC_ALPS_TCP_1_1 "
casesf<<"TCP data transfer"
casesf<<"*TC_MTS_1_1"
casesf<<"Data TX with default values "
casesf<<"*TC_MTS_1_2"
casesf<<"Data TX with Open security"
casesf<<"*TC_MTS_1_3"
casesf<<"Data TX with WPA2-PSK security"
casesf<<"*TC_MTS_1_4"
casesf<<"Data TX with WEP security"
casesf<<"*TC_MTS_1_5"
casesf<<"Data TX with WPA-PSK security"
casesf<<"*TC_MTS_1_6"
casesf<<"Data TX with WPA2(EAP_FAST) security"
casesf<<"*TC_MTS_1_7"
casesf<<"Data TX with WPA(EAP_FAST) security"
casesf<<"*TC_MTS_ALARM2_1_1"
casesf<<"Node behaviour when Alarm2 is pressed on the MTS board."
casesf<<"*TC_MTS_TCP_1_1"
casesf<<"TCP data transfer"
casesf<<"*TC_APP_SCAN_1_1"
casesf<<"Scanning application test"
casesf<<"TC_ALWAYS_ON_1_1"
casesf<<"Always-on Data Transfer #Default configuration"
casesf<<"TC_ALWAYS_ON_1_2"
casesf<<"Always-on Data transfer #S1-Mix BG"
casesf<<"TC_ALWAYS_ON_1_3"
casesf<<"Always-on Data transfer #S2-Mix BG"
casesf<<"TC_ALWAYS_ON_1_4"
casesf<<"Always-on Data transfer #S3-Mix BG"
casesf<<"TC_ALWAYS_ON_1_5"
casesf<<"Always-on Data transfer #S4-Mix BG"
casesf<<"TC_ALWAYS_ON_1_6"
casesf<<"Always-on Data transfer #S5-Mix BG"
casesf<<"TC_ALWAYS_ON_1_7"
casesf<<"Always-on Data transfer #S6-Mix BG"
casesf<<"TC_PSEUDO_ALWAYS_ON_1_1"
casesf<<"Nodes behaviour when configuration changed from STANDBY to pseudo Always ON."
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_1"
casesf<<"Node and AP has WEP encryption mode "
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_2"
casesf<<"Node and AP has WPA-PSK encryption mode "
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_3"
casesf<<"Node and AP has WPA2-PSK encryption mode "
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_4"
casesf<<"Node and AP has Open encryption mode "
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_5"
casesf<<"Node and AP has All encryption mode "
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_6"
casesf<<"Node and AP have different encryption mode WEP and WPA-PSK"
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_7"
casesf<<"Node and AP have different encryption mode WPA-PSK and WEP "
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_8"
casesf<<"Node and AP have different encryption mode WPA2-PSK and Open"
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_9"
casesf<<"Node and AP have different encryption mode Open and Shared"
casesf<<"TC_WLAN_ASSOC_ENCRPTN_1_10"
casesf<<"Node and AP has WPA2-PSK(mixed mode) encryption mode"
casesf<<"TC_WLAN_ASSOC_ENTRPRS_1_1"
casesf<<"Node and AP has TLS encryption mode"
casesf<<"TC_WLAN_ASSOC_ENTRPRS_1_2"
casesf<<"Node and AP has TTLS encryption mode"
casesf<<"TC_WLAN_ASSOC_ENTRPRS_1_3"
casesf<<"Node and AP has PEAP encryption mode"
casesf<<"TC_WLAN_ASSOC_ENTRPRS_1_4"
casesf<<"Node and AP has FAST encryption mode"
casesf<<"TC_WLAN_ASSOC_ENTRPRS_1_5"
casesf<<"Node has ALL encryption mode and AP is using WPA-Enterprise encryption mode"
casesf<<"TC_WLAN_ASSOC_ENTRPRS_1_6"
casesf<<"Node and AP have different encryption mode TLS and TTLS"
casesf<<"TC_WLAN_ASSOC_ENTRPRS_1_7"
casesf<<"Node and AP have different encryption mode TTLS and PEAP"
casesf<<"TC_WLAN_ASSOC_ENTRPRS_1_8"
casesf<<"Node and AP have different encryption mode PEAP and FAST"
casesf<<"TC_WLAN_ASSOC_ENTRPRS_1_9"
casesf<<"Node and AP have different encryption mode FAST and TLS"
casesf<<"TC_PA_EXTERNAL_1_1"
casesf<<"With External PA on "
casesf<<"* TC_SNTPS_1_1"
casesf<<"Node time synchronisation with SNTP server"
casesf<<" TC_SNTPS_1_2"
casesf<<"12 hour long run for node time synchronisation with SNTP server"
casesf<<"* TC_NO_SNTP_1_1"
casesf<<"SNTP server application is present but application is not running on it."
casesf<<"TC_SNTP_TIMEOUT_1_1"
casesf<<"Node waits for a default SNTP server timeout when no response received from the server"
casesf<<"TC_SNTP_TIMEOUT_1_2"
casesf<<"Node waits for a 5 sec timeout when no response received from the server."
casesf<<"TC_SNTP_TIMEOUT_1_3"
casesf<<"Node waits for a 10 sec timeout when no response received from the server."
casesf<<"TC_SNTP_FW_UPGRADE_1_1"
casesf<<"Check system time on the node after firmware upgrade after time synchronisation"
casesf<<"TC_SNTP_NODEOFF_1_1"
casesf<<"Node uses same SNTP server IP address after battery is removed and inserted back"
casesf<<"TC_REMOVE_SNTP_1_1"
casesf<<"SNTP server is removed after synchronisation"
casesf<<"TC_REMOVE_SNTP_1_2"
casesf<<"SNTP server is removed after synchronisation and left for 12 hours"
casesf<<"TC_SAME_SNTP_SNMP_1_1"
casesf<<"SNTP server is same as SNMP machine"
casesf<<"TC_SNTP_RE_SYNC_1_1"
casesf<<"Move time on SNTP server ahead by 1 hour after the Node time is synchronised "
casesf<<"TC_SNTP_RE_SYNC_1_2"
casesf<<"Move time on SNTP server behind by 1 hour after the Node time is synchronised"
casesf<<"TC_SNTP_SAME_INTERVAL_1_1"
casesf<<"Data interval is equal to SNTP interval"
casesf<<"TC_LOW_BATTERY_SNTP_1_1"
casesf<<"Node timer synchronisation when the battery power is low"
casesf<<"TC_NEW_SNTP_1_1"
casesf<<"Transfer the SNTP application to a different machine"
casesf<<"TC_DEFAULT_SNTP_SERVERIP_1_1"
casesf<<"Nodes behaviour when SNTP is enabled but no SNTP server IP configured"
casesf<<"TC_SNTP_DISABLE_1_1"
casesf<<"Nodes behaviour when SNTP is disabled."
casesf<<"TC_SNTP_SERVERIP_1_1"
casesf<<"First just SNTP is enabled and after sometime SNTP server IP is configured."
casesf<<"TC_SNTP_Enable_Disable_1_1"
casesf<<"SNTP is disabled after time synchronisation "
casesf<<"*TC_IBSS_1_1"
casesf<<"SNUT is creator of IBSS"
casesf<<"*TC_IBSS_1_2"
casesf<<"SNUT is joiner"
casesf<<"TC_IBSS_FW_1_1"
casesf<<"Firmware upgrade over IBSS on WEP security"
casesf<<"TC_IBSS_WALK_1_1"
casesf<<"SNMP walk over IBSS on Open security"
casesf<<"TC_IBSS_SNMPSET_1_1"
casesf<<"SNMP set over IBSS on Open security"
casesf<<"*TC_IBSS_TCP_1_1"
casesf<<"TCP data over IBSS."
casesf<<"*TC_IBSS_SEC_1_1"
casesf<<"Node creates a WEP-40 IBSS network"
casesf<<"TC_IBSS_SEC_1_2"
casesf<<"SNUT creates a WEP-128 IBSS network"
casesf<<"TC_IBSS_SEC_1_3"
casesf<<"SNUT joins a WEP-40 IBSS network"
casesf<<"*TC_IBSS_SEC_1_4"
casesf<<"SNUT joins a WEP-128 IBSS network"
casesf<<"TC_IBSS_STRESS_1_1"
casesf<<"5 day long run stress test case with all available nodes with WEP-40 security"
casesf<<"TC_IBSS_STRESS_2_"
casesf<<"1 hour long run with 1 SNUT and 7 STA cards and continuous ping running on all the STA cards"
casesf<<"TC_INFRA_TO_IBSS_1_1"
casesf<<"Node moves from WEP in infrastructure to WEP in IBSS"
casesf<<"TC_INFRA_TO_IBSS_2_1"
casesf<<"Node in WEP network tried to go to WEP IBSS when its creator SSID is not null. The node creates IBSS "
casesf<<"TC_INFRA_TO_IBSS_3_1"
casesf<<"Node with WEP configuration toggles from infra BSS mode to IBSS mode when the IBSS is not present and creator SSID is null. Node sends only probe requests."
casesf<<"TC_IBSS_TO_INFRA_1_1"
casesf<<"Node toggles from WEP infra BSS to WEP IBSS and back to WEP infra BSS mode when the third part STA is IBSS creator"
casesf<<"TC_IBSS_TO_INFRA_2_1"
casesf<<"Node toggles from Open infra BSS to Open IBSS and back to Open infra BSS mode when the third part STA is IBSS joiner"
casesf<<"*TC_STATIC_IP_1_1"
casesf<<"SNUT with static IP configuration"
casesf<<"TC_DHCP_OPTIONS_1_1"
casesf<<"DHCP server configured with all the Gainspan options"
casesf<<"TC_DHCP_OPTIONS_1_2"
casesf<<"DHCP server configured with only Primary SNMP address configured."
casesf<<"TC_DHCP_OPTIONS_1_3"
casesf<<"DHCP server configured with all the Gainspan options and Primary SNMP, secondary SNMP and data server are running on the same machine"
casesf<<"TC_DHCP_OPTIONS_2_1"
casesf<<"DHCP server configured with other vendor options"
casesf<<"TC_DHCP_OPTIONS_3_1"
casesf<<"DHCP server configured with both GainSpan and other vendor options"
casesf<<"TC_DHCP_OPTIONS_4_1"
casesf<<"DHCP server configured without vendor options"
casesf<<"*TC_MULTI_SERVER_1_1"
casesf<<"Multiple DHCP servers in the network"
casesf<<"*TC_DIFF_SUBNET_1_1"
casesf<<"Different subnet IP addresses"
casesf<<"*TC_DHCP_1_1"
casesf<<"DHCP lease time is 5 minutes"
casesf<<"*TC_DHCP_1_2"
casesf<<"DHCP lease time is 1 hour"
casesf<<"*TC_DNS_1_1"
casesf<<"The node is able to resolve the URL to IP address"
casesf<<"*TC_DNS_2_1"
casesf<<"The windows client is able to ping the node using its device name"
casesf<<"TC_SNMP_DNS_1_1"
casesf<<"SNUT is able to resolve SNMP and Data server machine names to their correct IP addresses"
casesf<<"TC_SSNMP_DNS_1_1"
casesf<<"SNUT is able to resolve Secondary SNMP and Data server machine names to their correct IP addresses"
casesf<<"TC_IP_NAME_MATCH_1_1"
casesf<<"SNUT works correctly when both IP address and machine name of the SNMP and Data server are configured correctly."
casesf<<"TC_IP_NAME_MISMATCH_1_1"
casesf<<"To check whether the node works correctly when there is a mismatch in the IP address and the machine name of the Primary SNMP and Data server configured on the SNUT"
casesf<<"TC_AP_DNS_1_1"
casesf<<"AP acts as DNS server"
casesf<<"TC_SECONDARY_DNS_1_1"
casesf<<"SNUT resolves IP using Secondary DNS server"
i =0
while i<600
  if casesf[i]
    Testcase.create(:testcase_id=>casesf[i]) do |r|
        r.testdescription=casesf[i+1]
        r.build_id=8
        i+=2
      end
  end

end




      
    end
    
   
    def delete
      # Remove this method in production, If any test case is deleted, report containing that can not be displayed
      Testcase.find(params[:id]).destroy
      redirect_to :action=>'list'      
    end    
    
    
    
  
end
