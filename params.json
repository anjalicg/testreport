{"name":"Testreport","tagline":"Application to manage test planning, test execution  and report generation of various releases","body":"*** Welcome to test execution management and report generation tool ***\r\nYou can do the following here:- \r\n1. Add new test cases to a category( feature request).\r\n2. Upload a list of test cases and description from an excel sheet in a pre-defined format.\r\n3. Add new release entry for which test execution is being done.\r\n4. Select the feature list for which test cases will be executed in a release and create a report with the selected test cases.\r\n5. Update the test results online.\r\n6. Get the test execution statistics online.\r\n7. Download the test execution report.\r\n8. Option to include bug id and description (as submitted in bugzilla); the list of the bugs for each release can be seen in the statistics page.\r\n\r\nEnhancements that can be done:- \r\n1. Facility to upload test environment diagrams.\r\n2. Ability to download the whole test case document.\r\n3. Integration with bugzilla.\r\n4. Option to include test steps.\r\n5. Automatically mailing the report to a mailing list at a specific time everyday of the execution.\r\n6. Add the tester details in a different model and implement new controller for it. This was hardcoded for my team.\r\n\r\nNote:- \r\nA sample test report with dummy data for reference has been kept in the same path as this readme. File name SampleTestReport.xls\r\n\r\n*** END ***\r\n\r\n== Welcome to Rails\r\n\r\nRails is a web-application framework that includes everything needed to create \r\ndatabase-backed web applications according to the Model-View-Control pattern. \r\n\r\nThis pattern splits the view (also called the presentation) into \"dumb\" templates\r\nthat are primarily responsible for inserting pre-built data in between HTML tags.\r\nThe model contains the \"smart\" domain objects (such as Account, Product, Person,\r\nPost) that holds all the business logic and knows how to persist themselves to\r\na database. The controller handles the incoming requests (such as Save New Account,\r\nUpdate Product, Show Post) by manipulating the model and directing data to the view.\r\n\r\nIn Rails, the model is handled by what's called an object-relational mapping\r\nlayer entitled Active Record. This layer allows you to present the data from\r\ndatabase rows as objects and embellish these data objects with business logic\r\nmethods. You can read more about Active Record in\r\nlink:files/vendor/rails/activerecord/README.html.\r\n\r\nThe controller and view are handled by the Action Pack, which handles both\r\nlayers by its two parts: Action View and Action Controller. These two layers\r\nare bundled in a single package due to their heavy interdependence. This is\r\nunlike the relationship between the Active Record and Action Pack that is much\r\nmore separate. Each of these packages can be used independently outside of\r\nRails.  You can read more about Action Pack in\r\nlink:files/vendor/rails/actionpack/README.html.\r\n\r\n\r\n== Getting Started\r\n\r\n1. At the command prompt, start a new Rails application using the <tt>rails</tt> command\r\n   and your application name. Ex: rails myapp\r\n2. Change directory into myapp and start the web server: <tt>script/server</tt> (run with --help for options)\r\n3. Go to http://localhost:3000/ and get \"Welcome aboard: You're riding the Rails!\"\r\n4. Follow the guidelines to start developing your application\r\n\r\n\r\n== Web Servers\r\n\r\nBy default, Rails will try to use Mongrel if it's are installed when started with script/server, otherwise Rails will use WEBrick, the webserver that ships with Ruby. But you can also use Rails\r\nwith a variety of other web servers.\r\n\r\nMongrel is a Ruby-based webserver with a C component (which requires compilation) that is\r\nsuitable for development and deployment of Rails applications. If you have Ruby Gems installed,\r\ngetting up and running with mongrel is as easy as: <tt>gem install mongrel</tt>.\r\nMore info at: http://mongrel.rubyforge.org\r\n\r\nSay other Ruby web servers like Thin and Ebb or regular web servers like Apache or LiteSpeed or\r\nLighttpd or IIS. The Ruby web servers are run through Rack and the latter can either be setup to use\r\nFCGI or proxy to a pack of Mongrels/Thin/Ebb servers.\r\n\r\n== Apache .htaccess example for FCGI/CGI\r\n\r\n# General Apache options\r\nAddHandler fastcgi-script .fcgi\r\nAddHandler cgi-script .cgi\r\nOptions +FollowSymLinks +ExecCGI\r\n\r\n# If you don't want Rails to look in certain directories,\r\n# use the following rewrite rules so that Apache won't rewrite certain requests\r\n# \r\n# Example:\r\n#   RewriteCond %{REQUEST_URI} ^/notrails.*\r\n#   RewriteRule .* - [L]\r\n\r\n# Redirect all requests not available on the filesystem to Rails\r\n# By default the cgi dispatcher is used which is very slow\r\n# \r\n# For better performance replace the dispatcher with the fastcgi one\r\n#\r\n# Example:\r\n#   RewriteRule ^(.*)$ dispatch.fcgi [QSA,L]\r\nRewriteEngine On\r\n\r\n# If your Rails application is accessed via an Alias directive,\r\n# then you MUST also set the RewriteBase in this htaccess file.\r\n#\r\n# Example:\r\n#   Alias /myrailsapp /path/to/myrailsapp/public\r\n#   RewriteBase /myrailsapp\r\n\r\nRewriteRule ^$ index.html [QSA]\r\nRewriteRule ^([^.]+)$ $1.html [QSA]\r\nRewriteCond %{REQUEST_FILENAME} !-f\r\nRewriteRule ^(.*)$ dispatch.cgi [QSA,L]\r\n\r\n# In case Rails experiences terminal errors\r\n# Instead of displaying this message you can supply a file here which will be rendered instead\r\n# \r\n# Example:\r\n#   ErrorDocument 500 /500.html\r\n\r\nErrorDocument 500 \"<h2>Application error</h2>Rails application failed to start properly\"\r\n\r\n\r\n== Debugging Rails\r\n\r\nSometimes your application goes wrong.  Fortunately there are a lot of tools that\r\nwill help you debug it and get it back on the rails.\r\n\r\nFirst area to check is the application log files.  Have \"tail -f\" commands running\r\non the server.log and development.log. Rails will automatically display debugging\r\nand runtime information to these files. Debugging info will also be shown in the\r\nbrowser on requests from 127.0.0.1.\r\n\r\nYou can also log your own messages directly into the log file from your code using\r\nthe Ruby logger class from inside your controllers. Example:\r\n\r\n  class WeblogController < ActionController::Base\r\n    def destroy\r\n      @weblog = Weblog.find(params[:id])\r\n      @weblog.destroy\r\n      logger.info(\"#{Time.now} Destroyed Weblog ID ##{@weblog.id}!\")\r\n    end\r\n  end\r\n\r\nThe result will be a message in your log file along the lines of:\r\n\r\n  Mon Oct 08 14:22:29 +1000 2007 Destroyed Weblog ID #1\r\n\r\nMore information on how to use the logger is at http://www.ruby-doc.org/core/\r\n\r\nAlso, Ruby documentation can be found at http://www.ruby-lang.org/ including:\r\n\r\n* The Learning Ruby (Pickaxe) Book: http://www.ruby-doc.org/docs/ProgrammingRuby/\r\n* Learn to Program: http://pine.fm/LearnToProgram/  (a beginners guide)\r\n\r\nThese two online (and free) books will bring you up to speed on the Ruby language\r\nand also on programming in general.\r\n\r\n\r\n== Debugger\r\n\r\nDebugger support is available through the debugger command when you start your Mongrel or\r\nWebrick server with --debugger. This means that you can break out of execution at any point\r\nin the code, investigate and change the model, AND then resume execution! \r\nYou need to install ruby-debug to run the server in debugging mode. With gems, use 'gem install ruby-debug'\r\nExample:\r\n\r\n  class WeblogController < ActionController::Base\r\n    def index\r\n      @posts = Post.find(:all)\r\n      debugger\r\n    end\r\n  end\r\n\r\nSo the controller will accept the action, run the first line, then present you\r\nwith a IRB prompt in the server window. Here you can do things like:\r\n\r\n  >> @posts.inspect\r\n  => \"[#<Post:0x14a6be8 @attributes={\\\"title\\\"=>nil, \\\"body\\\"=>nil, \\\"id\\\"=>\\\"1\\\"}>,\r\n       #<Post:0x14a6620 @attributes={\\\"title\\\"=>\\\"Rails you know!\\\", \\\"body\\\"=>\\\"Only ten..\\\", \\\"id\\\"=>\\\"2\\\"}>]\"\r\n  >> @posts.first.title = \"hello from a debugger\"\r\n  => \"hello from a debugger\"\r\n\r\n...and even better is that you can examine how your runtime objects actually work:\r\n\r\n  >> f = @posts.first\r\n  => #<Post:0x13630c4 @attributes={\"title\"=>nil, \"body\"=>nil, \"id\"=>\"1\"}>\r\n  >> f.\r\n  Display all 152 possibilities? (y or n)\r\n\r\nFinally, when you're ready to resume execution, you enter \"cont\"\r\n\r\n\r\n== Console\r\n\r\nYou can interact with the domain model by starting the console through <tt>script/console</tt>.\r\nHere you'll have all parts of the application configured, just like it is when the\r\napplication is running. You can inspect domain models, change values, and save to the\r\ndatabase. Starting the script without arguments will launch it in the development environment.\r\nPassing an argument will specify a different environment, like <tt>script/console production</tt>.\r\n\r\nTo reload your controllers and models after launching the console run <tt>reload!</tt>\r\n\r\n== dbconsole\r\n\r\nYou can go to the command line of your database directly through <tt>script/dbconsole</tt>.\r\nYou would be connected to the database with the credentials defined in database.yml.\r\nStarting the script without arguments will connect you to the development database. Passing an\r\nargument will connect you to a different database, like <tt>script/dbconsole production</tt>.\r\nCurrently works for mysql, postgresql and sqlite.\r\n\r\n== Description of Contents\r\n\r\napp\r\n  Holds all the code that's specific to this particular application.\r\n\r\napp/controllers\r\n  Holds controllers that should be named like weblogs_controller.rb for\r\n  automated URL mapping. All controllers should descend from ApplicationController\r\n  which itself descends from ActionController::Base.\r\n\r\napp/models\r\n  Holds models that should be named like post.rb.\r\n  Most models will descend from ActiveRecord::Base.\r\n\r\napp/views\r\n  Holds the template files for the view that should be named like\r\n  weblogs/index.html.erb for the WeblogsController#index action. All views use eRuby\r\n  syntax.\r\n\r\napp/views/layouts\r\n  Holds the template files for layouts to be used with views. This models the common\r\n  header/footer method of wrapping views. In your views, define a layout using the\r\n  <tt>layout :default</tt> and create a file named default.html.erb. Inside default.html.erb,\r\n  call <% yield %> to render the view using this layout.\r\n\r\napp/helpers\r\n  Holds view helpers that should be named like weblogs_helper.rb. These are generated\r\n  for you automatically when using script/generate for controllers. Helpers can be used to\r\n  wrap functionality for your views into methods.\r\n\r\nconfig\r\n  Configuration files for the Rails environment, the routing map, the database, and other dependencies.\r\n\r\ndb\r\n  Contains the database schema in schema.rb.  db/migrate contains all\r\n  the sequence of Migrations for your schema.\r\n\r\ndoc\r\n  This directory is where your application documentation will be stored when generated\r\n  using <tt>rake doc:app</tt>\r\n\r\nlib\r\n  Application specific libraries. Basically, any kind of custom code that doesn't\r\n  belong under controllers, models, or helpers. This directory is in the load path.\r\n\r\npublic\r\n  The directory available for the web server. Contains subdirectories for images, stylesheets,\r\n  and javascripts. Also contains the dispatchers and the default HTML files. This should be\r\n  set as the DOCUMENT_ROOT of your web server.\r\n\r\nscript\r\n  Helper scripts for automation and generation.\r\n\r\ntest\r\n  Unit and functional tests along with fixtures. When using the script/generate scripts, template\r\n  test files will be generated for you and placed in this directory.\r\n\r\nvendor\r\n  External libraries that the application depends on. Also includes the plugins subdirectory.\r\n  If the app has frozen rails, those gems also go here, under vendor/rails/.\r\n  This directory is in the load path.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}